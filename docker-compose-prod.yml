services:
  class_tracker:
    image: mm-class-tracker-image
    container_name: mm-class-tracker-prod
    build:
      context: .
      args:
        ENV_TYPE: ${ENV_TYPE}
        UID: "${UID}"
    command: |
      uv run bash -c '
        python manage.py migrate &&
        python manage.py generate_client_assets &&
        python manage.py build &&
        python manage.py collectstatic --clear --noinput &&
        npm run sass:build &&
        uvicorn server.asgi:application --host 0.0.0.0 --port ${DJANGO_PORT}
      '
    tty: true
    user: "${UID}"
    volumes:
      - class_tracker_node_modules_prod:/app/node_modules
      - class_tracker_python_venv_prod:/app/.venv
      - ./:/app
    env_file:
      - ${ENV_FILE}
    restart: unless-stopped
    networks:
      - caddy_net
    depends_on:
      class_tracker_redis:
        condition: service_healthy

  # redis-overcommit-on-host
  class_tracker_redis_overcommit:
    build: https://github.com/bkuhl/redis-overcommit-on-host.git
    restart: "no"
    privileged: true
    volumes:
      - /proc/sys/vm:/mnt/vm
    networks:
      - caddy_net

  class_tracker_redis:
    image: redis
    container_name: redis-class-tracker-prod
    command: sh -c "redis-server --port ${REDIS_PORT} --requirepass ${REDIS_PASSWORD}"
    env_file:
      - ${ENV_FILE}
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-h",
          "localhost",
          "-p",
          "${REDIS_PORT}",
          "-a",
          "${REDIS_PASSWORD}",
          "ping",
        ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - caddy_net

  class_tracker_scheduler_worker_default:
    image: mm-class-tracker-image
    container_name: class-tracker-scheduler-worker-default-prod
    command: uv run python manage.py scheduler_worker
    user: "${UID}"
    volumes:
      - class_tracker_python_venv_prod:/app/.venv
      - ./:/app
    env_file:
      - ${ENV_FILE}
    restart: unless-stopped
    depends_on:
      class_tracker_redis:
        condition: service_healthy
    networks:
      - caddy_net

volumes:
  class_tracker_node_modules_prod:
    external: true
  class_tracker_python_venv_prod:
    external: true

networks:
  caddy_net:
    external: true
