"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

import django_stubs_ext

django_stubs_ext.monkeypatch()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(exist_ok=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ["DJANGO_DEBUG"] == "1"

ALLOWED_HOSTS: list[str] = []
# ALLOWED_HOSTS = os.environ["DJANGO_ALLOWED_HOSTS"].split()


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "reactivated",
    "class_tracker",
    "scheduler",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
    {
        "BACKEND": "reactivated.backend.JSX",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "server.util.context_processors.user",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.csrf",
                "django.template.context_processors.request",
                "django.template.context_processors.static",
            ]
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["POSTGRES_DB"],
        "USER": os.environ["POSTGRES_USER"],
        "PASSWORD": os.environ["POSTGRES_PASSWORD"],
        "HOST": os.environ["POSTGRES_HOST"],
        "PORT": os.environ["POSTGRES_PORT"],
        "ATOMIC_REQUESTS": True,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.environ["TZ"]

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = os.environ["DJANGO_STATIC_URL"]
STATIC_ROOT = BASE_DIR / os.environ["DJANGO_COLLECTED_PATH"].strip("/")
STATICFILES_DIRS = (BASE_DIR / os.environ["DJANGO_STATIC_URL"].strip("/"),)

# MEDIA_URL = os.environ["DJANGO_MEDIA_URL"]
MEDIA_ROOT = BASE_DIR / os.environ["DJANGO_MEDIA_URL"].strip("/")
MEDIA_ROOT.mkdir(exist_ok=True)

# CSRF_TRUSTED_ORIGINS = os.environ["DJANGO_CSRF_TRUSTED_ORIGINS"].split()

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{levelname} {asctime:s} {filename:s} {funcName:s} {lineno:3d} -- {message}",
            "datefmt": "%Y-%m-%d %I:%M:%S %p",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
            # 'stream': sys.stdout,
        },
        "console_debug": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "main_handler": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "class_tracker.log",
            "mode": "a",
            "encoding": "utf-8",
            "formatter": "simple",
            "backupCount": 5,
            "maxBytes": 5 * 1024**2,  # 5 MiB
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["main_handler"],
            "level": "WARNING",
            "propagate": False,
        },
        "main": {
            "handlers": ["main_handler", "console"],
            "level": "INFO",
            "propagate": False,
        },
        # 'django.db.backends': {
        #     'level': 'DEBUG',
        #     'handlers': ['console_debug'],
        # }
    },
}

REDIS_HOST_PORT = {
    "HOST": os.environ["REDIS_HOST"],
    "PORT": os.environ["REDIS_PORT"],
}

REDIS_USER_PASSWORD = {
    "USERNAME": "",
    "PASSWORD": os.environ["REDIS_PASSWORD"],
}

SCHEDULER_QUEUES = {
    "default": {
        **REDIS_HOST_PORT,
        **REDIS_USER_PASSWORD,
        "DB": 0,
        "DEFAULT_TIMEOUT": 360,
        "REDIS_CLIENT_KWARGS": {  # Eventual additional Redis connection arguments
            # "ssl_cert_reqs": None,
        },
    },
}

JOINAPP_DEVICE_ID = os.environ["JOINAPP_DEVICE_ID"]
JOINAPP_API_KEY = os.environ["JOINAPP_API_KEY"]

JOINAPP_SEND_URL = os.environ["JOINAPP_SEND_URL"]
JOINAPP_LIST_URL = os.environ["JOINAPP_LIST_URL"]
